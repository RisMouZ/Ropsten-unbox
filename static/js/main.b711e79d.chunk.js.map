{"version":3,"sources":["getWeb3.js","Address.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","Web3","enable","on","alert","location","reload","console","log","provider","providers","HttpProvider","Address","className","this","props","addr","React","Component","App","state","storageValue","accounts","contract","addresses","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","SimpleStorageContract","networks","instance","Contract","abi","address","options","fromBlock","toBlock","options1","getPastEvents","listAddress","events","dataStored","event","push","methods","get","call","response","setState","error","runSet","valeur","document","getElementById","value","set","send","from","transac","returnValues","data","type","id","onClick","map","addresse","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b711e79d.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n          window.ethereum.on('disconnect',function(){\n            alert(\"il faut se connecter\");\n          });\n          window.ethereum.on('accountsChanged',function(){\n            window.location.reload();\n          });     \n          window.ethereum.on('chainChanged',function(){\n            window.location.reload();\n          });\n       \n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from \"react\";\n// import \"./Address.css\";\n\nexport default class Address extends React.Component {\n  render() {\n    return (\n      <div className=\"header\">\n        <p>Voici l'adress que vous utilisez: </p>\n        {this.props.addr}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Address from \"./Address.js\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    storageValue: 0,\n    web3: null,\n    accounts: null,\n    contract: null,\n    addresses: null,\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n\n      let options = {\n        fromBlock: 0, //Number || \"earliest\" || \"pending\" || \"latest\"\n        toBlock: \"latest\",\n      };\n\n      let options1 = {\n        fromBlock: 0, //Number || \"earliest\" || \"pending\" || \"latest\"\n      };\n\n      let listAddress = await instance.getPastEvents(\"dataStored\", options);\n\n      instance.events\n        .dataStored(options1)\n        .on(\"data\", (event) => listAddress.push(event));\n      const response = await instance.methods.get().call();\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({\n        storageValue: response,\n        web3,\n        accounts,\n        contract: instance,\n        addresses: listAddress,\n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  runSet = async () => {\n    const { accounts, contract } = this.state;\n    let valeur = document.getElementById(\"valeur\").value;\n    const transac = await contract.methods\n      .set(valeur)\n      .send({ from: accounts[0] });\n    const response = await contract.methods.get().call();\n\n    console.log(\n      \"l'adresse est celle ci: \" + transac.events.dataStored.returnValues.addr\n    );\n    console.log(\n      \"la data est celle ci: \" + transac.events.dataStored.returnValues.data\n    );\n    console.log(transac);\n\n    this.setState({ storageValue: response });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <Address addr={this.state.accounts} />\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <div>The stored value is: {this.state.storageValue}</div>\n        <p>Try changing the value by setting it via the input:</p>\n        <input type=\"text\" id=\"valeur\" />\n        <button onClick={this.runSet}>\n          Set the value you wrote inside the blockchain\n        </button>\n        <br />\n        <p>\n          Here is the addresses that interacted with the contract, and the value\n          they put\n        </p>\n        <table>\n          {this.state.addresses.map((addresse) => (\n            <tr>\n              <td>{addresse.returnValues.addr}</td>\n              <td>{addresse.returnValues.data}</td>\n            </tr>\n          ))}\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}